name: NestJS ipeline (Yarn)

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        description: The NodeJS version to build the app with.
        default: "20"
      release-mode:
        required: false
        type: boolean
        description: Determines if the action must bump a new version after the build.
        default: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install yarn@1.22.22
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Clean and install
        run: yarn install --frozen-lockfile

      - name: Lint code
        run: yarn lint

      - name: Run unit tests
        run: yarn test:unit

      - name: Run integration tests
        run: yarn test:integration

      - name: Build binaries
        run: yarn build

  release:
    name: Release
    needs: build
    if: ${{ inputs.release-mode }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install yarn@1.22.22
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate
          
      - name: Clean and install
        run: yarn install --frozen-lockfile

      - name: Setup git user
        run: |
          git config user.email "mcwiise@gmail.com"
          git config user.name "Captain Mcwiise"

      - name: Bump a new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn release

      - name: print released version
        run: node -p "require('./package.json').version"

  push:
    name: Push to Docker Registry
    needs: release
    if: ${{ inputs.release-mode }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to fetch tags

      - name: Get released tag
        id: get_tag
        run: |
          git fetch --tags --force
          tag=$(git tag --sort=-creatordate | head -n 1)
          echo "Latest tag is: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Checkout code at tag
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_tag.outputs.tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::050752613795:role/STDServiceRoleForGitHub
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build Docker image
        id: build_image
        run: |
          TAG_NO_V=$(echo "${{ steps.get_tag.outputs.tag }}" | sed 's/^v//')
          GITHUB_REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/$GITHUB_REPO_NAME:$TAG_NO_V"
          echo "Building Docker image: $IMAGE_URI"
          docker build -t $GITHUB_REPO_NAME:$TAG_NO_V .
          docker tag $GITHUB_REPO_NAME:$TAG_NO_V $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      
      - name: Push to ECR
        run: |
          echo "Pushing Docker image to ECR: ${{ steps.build_image.outputs.image_uri }}"
          docker push ${{ steps.build_image.outputs.image_uri }}